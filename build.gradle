plugins {
    id "fabric-loom" version "1.0-SNAPSHOT"
    id "maven-publish"
}

def targetJavaVersion = 17

loom {
    runConfigs.configureEach {
        ideConfigGenerated = true
    }
}

//version = project.mod_version
//group = project.maven_group

allprojects {
    apply plugin: "maven-publish"
    apply plugin: "fabric-loom"

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 8
    }

    java {
        def javaVersion = JavaVersion.toVersion(targetJavaVersion)
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
    }

    version = project.mod_version
    group = project.maven_group

    repositories {
        mavenCentral()

        maven { url "https://maven.shedaniel.me/" }
        maven { url "https://maven.terraformersmc.com/releases/" }
        maven { url "https://jitpack.io" }
    }

    dependencies {
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    }

    processResources {
        inputs.property "version", project.version
        filteringCharset "UTF-8"

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.common_minecraft_version}"
    mappings "net.fabricmc:yarn:${project.common_yarn_mappings}:v2"

    // MixinExtras.
    implementation("com.github.LlamaLad7:MixinExtras:0.1.1")
    annotationProcessor("com.github.LlamaLad7:MixinExtras:0.1.1")
    include("com.github.LlamaLad7:MixinExtras:0.1.1")

    // OmegaConfig.
    include("com.github.Draylar.omega-config:omega-config-base:${project.omega_config_version}")
    modImplementation("com.github.Draylar.omega-config:omega-config-base:${project.omega_config_version}")
    include("com.github.Draylar.omega-config:omega-config-gui:${project.omega_config_version}")
    modImplementation("com.github.Draylar.omega-config:omega-config-gui:${project.omega_config_version}")

    subprojects.forEach((project) -> {
        include(project) {
            transitive = false
        }
    })
}

subprojects {
    dependencies {
        implementation(project(path: ":", configuration: "namedElements"));
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
